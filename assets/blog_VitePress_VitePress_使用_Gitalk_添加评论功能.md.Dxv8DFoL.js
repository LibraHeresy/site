import{P as a}from"./chunks/PreviewImage.BA25NMm7.js";import{c as h,o as l,ah as e,G as t,j as i,a as n}from"./chunks/framework.CokR5C85.js";import"./chunks/theme.DhavNqhP.js";const g=JSON.parse('{"title":"VitePress 使用 Gitalk 添加评论功能","description":"","frontmatter":{},"headers":[],"relativePath":"blog/VitePress/VitePress_使用_Gitalk_添加评论功能.md","filePath":"blog/VitePress/VitePress_使用_Gitalk_添加评论功能.md","lastUpdated":1742197616000}'),k={name:"blog/VitePress/VitePress_使用_Gitalk_添加评论功能.md"},c=Object.assign(k,{setup(p){return(d,s)=>(l(),h("div",null,[s[0]||(s[0]=e('<h1 id="vitepress-使用-gitalk-添加评论功能" tabindex="-1">VitePress 使用 Gitalk 添加评论功能 <a class="header-anchor" href="#vitepress-使用-gitalk-添加评论功能" aria-label="Permalink to &quot;VitePress 使用 Gitalk 添加评论功能&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>一个优质的博客怎么能没有评论功能呢？但看来看去，不用自己搭建后端服务的方案都大同小异，都是利用 <code>Github</code> 的 <code>issues</code> 模块实现的。</p><p>其中的佼佼者是 <code>Gitment</code> 和 <code>Gitalk</code> ，只可惜这两个库是难兄难弟，基本上都停更了。</p><p><code>Gitment</code> 最后更新日期为 2018.04.05， <code>Gitalk</code> 最后更新日期为 2022.07.18。</p><p>最后还是确定使用 <code>Gitalk</code> ，引用了大神 <a href="https://github.com/lesonky" target="_blank" rel="noreferrer">@lesonky</a> 修改以后的 <a href="https://github.com/lesonky/gitalk" target="_blank" rel="noreferrer">Gitalk</a> 库，参考了博客<a href="https://juejin.cn/post/7146037234527895560" target="_blank" rel="noreferrer">《vitepress 配置评论(gitalk)》</a>。</p><h2 id="环境" tabindex="-1">环境 <a class="header-anchor" href="#环境" aria-label="Permalink to &quot;环境&quot;">​</a></h2><blockquote><p>node: v16.15.1</p><p>Gitalk: v1.7.2</p></blockquote><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="注册-oauth" tabindex="-1">注册 <code>OAuth</code> <a class="header-anchor" href="#注册-oauth" aria-label="Permalink to &quot;注册 `OAuth`&quot;">​</a></h3><p>这一步是为了使用 <code>Github</code> 提供的 <code>OAuth2</code>（第三方登录服务）。</p><h4 id="_1-来到-github-application-创建页面" tabindex="-1">1. 来到 <a href="https://github.com/settings/applications/new" target="_blank" rel="noreferrer">Github Application</a> 创建页面 <a class="header-anchor" href="#_1-来到-github-application-创建页面" aria-label="Permalink to &quot;1. 来到 [Github Application](https://github.com/settings/applications/new) 创建页面&quot;">​</a></h4>',12)),t(a,{desc:"创建Github Application",imageUrl:"https://gcore.jsdelivr.net/gh/LibraHeresy/BaiduNetDisk/images/blog/202305291524133.png"}),s[1]||(s[1]=i("h4",{id:"_2-配置参数注册-oauth",tabindex:"-1"},[n("2. 配置参数注册 "),i("code",null,"OAuth"),n(),i("a",{class:"header-anchor",href:"#_2-配置参数注册-oauth","aria-label":'Permalink to "2. 配置参数注册 `OAuth`"'},"​")],-1)),t(a,{desc:"配置参数",imageUrl:"https://gcore.jsdelivr.net/gh/LibraHeresy/BaiduNetDisk/images/blog/202305291524378.png"}),t(a,{desc:"创建密钥",imageUrl:"https://gcore.jsdelivr.net/gh/LibraHeresy/BaiduNetDisk/images/blog/202305291526623.png"}),s[2]||(s[2]=i("h4",{id:"_3-查看生成的-client-id-和-client-secrets",tabindex:"-1"},[n("3. 查看生成的 "),i("code",null,"Client ID"),n(" 和 "),i("code",null,"Client secrets"),n(),i("a",{class:"header-anchor",href:"#_3-查看生成的-client-id-和-client-secrets","aria-label":'Permalink to "3. 查看生成的 `Client ID` 和 `Client secrets`"'},"​")],-1)),t(a,{desc:"OAuth Apps",imageUrl:"https://gcore.jsdelivr.net/gh/LibraHeresy/BaiduNetDisk/images/blog/202305291526512.png"}),t(a,{desc:"查看密钥",imageUrl:"https://gcore.jsdelivr.net/gh/LibraHeresy/BaiduNetDisk/images/blog/202305291526831.png"}),s[3]||(s[3]=e(`<h3 id="安装-gitalk" tabindex="-1">安装 <code>Gitalk</code> <a class="header-anchor" href="#安装-gitalk" aria-label="Permalink to &quot;安装 \`Gitalk\`&quot;">​</a></h3><p>根据上文博客评论区大神的说法，还是推荐直接从 <code>Github</code> 安装 <code>Gitalk</code> 。</p><p>因为我一直安装不成功大神的库，所以我直接 <code>fork</code> 了大神 <code>Gitalk</code> 仓库，把地址改成了自己的仓库地址，你们也可以直接用我的。</p><p>具体配置如下</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;gitalk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/LibraHeresy/gitalk.git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;vitepress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0-alpha.72&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>然后<code>npm</code>直接安装就行了。</p><h3 id="挂载-gitalk-组件" tabindex="-1">挂载 <code>Gitalk</code> 组件 <a class="header-anchor" href="#挂载-gitalk-组件" aria-label="Permalink to &quot;挂载 \`Gitalk\` 组件&quot;">​</a></h3><p>在 <code>docs/.vitepress</code> 路径下，新建 <code>theme</code> 文件夹，在该文件夹下新建 <code>index.js</code> 和 <code>MyLayout.vue</code> 。</p><h4 id="index-js" tabindex="-1"><code>index.js</code> <a class="header-anchor" href="#index-js" aria-label="Permalink to &quot;\`index.js\`&quot;">​</a></h4><p>在 <code>index.js</code> 文件内导入 <code>VitePress</code> 默认主题配置，再导入自己写的布局组件，覆盖默认主题对象的 <code>Layout</code> 属性，最后导出该文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultTheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vitepress/theme&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyLayout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./MyLayout.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DefaultTheme,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Layout: MyLayout,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="mylayout-vue" tabindex="-1"><code>MyLayout.vue</code> <a class="header-anchor" href="#mylayout-vue" aria-label="Permalink to &quot;\`MyLayout.vue\`&quot;">​</a></h4><p>这里和上文的博客说法完全不一样，折腾了很久才知道，VitePress 有一个默认的 <code>Layout</code> 组件， <code>Layout</code> 组件内有负责渲染文本的 <code>Content</code> 组件，我们需要的只是在 <code>Layout</code> 组件上挂载一个评论组件而已。</p><p>但是按照博客的写法，不出意外我们只能收获一个只有评论组件的页面，所以就要导入原有的 <code>Layout</code> 组件，并使用 <code>Vue3</code> 的新写法，直接写一个子组件渲染挂载评论组件到 <code>Layout</code> 组件上。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">Layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultTheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vitepress/theme&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultTheme;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { watch, nextTick, onMounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;gitalk/dist/gitalk.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Gitalk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;gitalk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useRouter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vitepress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { route } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面路由对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> route.path, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听路由变化，重新挂载评论组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> content_div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.content-container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查找页面内容DOM节点，此节点只有layout为Page（默认layout属性）的md文档才有</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (content_div) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> before_s_div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gitalk-page-container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取页面评论组件DOM节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(before_s_div) { 判断是否已有评论组件节点，有则删除，重新创建。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                content_div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(before_s_div)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> s_div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              s_div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gitalk-page-container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              content_div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s_div); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// querySelector的节点可自己根据自己想加载的地方设置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gitment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Gitalk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                id: route.data.title, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选，推荐设置为页面标题，因为会作为标签传给Github issues，且issues标签有长度限制。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                owner: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;LibraHeresy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// GitHub repository 所有者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                repo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite-press&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// GitHub repository</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                clientID: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自己的clientID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                clientSecret: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自己的clientSecret</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                admin: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;LibraHeresy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// GitHub repository 所有者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                labels: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Gitalk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// GitHub issue 的标签</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                createIssueManually: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果当前页面没有相应的 isssue 且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              gitment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gitalk-page-container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { immediate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>全部配置好，就可以收获一个有评论功能的博客了。</p>`,16)),t(a,{desc:"效果图",imageUrl:"https://gcore.jsdelivr.net/gh/LibraHeresy/BaiduNetDisk/images/blog/202305291527063.png"}),s[4]||(s[4]=e('<h2 id="遇到的问题" tabindex="-1">遇到的问题 <a class="header-anchor" href="#遇到的问题" aria-label="Permalink to &quot;遇到的问题&quot;">​</a></h2><h3 id="打包报错-提示找不到-window-和-document-对象" tabindex="-1">打包报错，提示找不到 <code>window</code> 和 <code>document</code> 对象 <a class="header-anchor" href="#打包报错-提示找不到-window-和-document-对象" aria-label="Permalink to &quot;打包报错，提示找不到 `window` 和 `document` 对象&quot;">​</a></h3><p>因为在打包的时候，项目处于 <code>node</code> 环境，当然就没有 <code>window</code> 和 <code>document</code> 对象，所以和两个对象有关的方法要放在 <code>onMounted</code> 生命周期方法内，这是 <code>VitePress</code> 的规则。</p><h3 id="切换首页后-评论组件消失" tabindex="-1">切换首页后，评论组件消失 <a class="header-anchor" href="#切换首页后-评论组件消失" aria-label="Permalink to &quot;切换首页后，评论组件消失&quot;">​</a></h3><p>这是因为当你首页设置 <code>layout</code> 为 <code>home</code> 时，页面是没有 <code>.content-container</code> 节点的，所以评论组件会和 <code>.content-container</code> 这个节点一起被删除。</p><p>而当你切回博客页面时，挂载方法是写在 <code>onMounted</code> 生命周期方法内，也不会再挂载评论组件了。</p><p>这个时候我们要用 <code>watch</code> 函数监听路由变化，重新执行挂载方法。</p><h3 id="切换页面后-评论组件没有刷新" tabindex="-1">切换页面后，评论组件没有刷新 <a class="header-anchor" href="#切换页面后-评论组件没有刷新" aria-label="Permalink to &quot;切换页面后，评论组件没有刷新&quot;">​</a></h3><p>这是因为页面本身没有变化，变得只是 <code>Content</code> 组件渲染的文本内容而已，原因是 <a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA" target="_blank" rel="noreferrer">SPA</a>。</p><p>所以我们需要手动删除原有的评论组件 <code>DOM</code> 节点，重新挂载一个新的评论组件。</p>',10))]))}});export{g as __pageData,c as default};
